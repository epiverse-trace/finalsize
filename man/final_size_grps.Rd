% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/finalsize_risk_grps.R
\name{final_size_grps}
\alias{final_size_grps}
\title{Final size of epidemic by susceptibility groups}
\usage{
final_size_grps(
  contact_matrix,
  demography_vector,
  p_susceptibility,
  susceptibility,
  solver = c("iterative", "newton"),
  control = list()
)
}
\arguments{
\item{contact_matrix}{Social contact matrix. Entry $mm_{ij}$ gives average
number of contacts in group $i$ reported by participants in group j}

\item{demography_vector}{Demography vector. Entry $pp_{i}$ gives proportion
of total population in group $i$ (model will normalise if needed)}

\item{p_susceptibility}{A matrix giving the probability that an individual
in demography group $i$ is in risk (or susceptibility) group $j$.
Each row represents the overall distribution of individuals in demographic
group $i$ across risk groups, and each row *must sum to 1.0*.}

\item{susceptibility}{A matrix giving the susceptibility of individuals in
demographic group $i$ and risk group $j$.}

\item{solver}{Which solver to use. Options are "iterative" or "newton", for
the iterative solver, or the Newton solver, respectively. Special conditions
apply when using the Newton solver, see the `control` argument.}

\item{control}{A list of named solver options, see *Details*.}
}
\value{
A vector of final sizes by demography group.
}
\description{
`final_size_grps` allows the calculation of epidemic final sizes
in a population with heterogeneous mixing, and with heterogeneous
susceptibility to infection.

# Solver options

The `control` argument accepts a list of solver options, with the iterative
solver taking two extra arguments than the Newton solver.

## Common options

1. `iterations`: The number of iterations over which to solve for the final
size, unless the error is below the solver tolerance.
2. `tolerance`: The solver tolerance, set to `1e-6` by default; solving for
final size ends when the error drops below this tolerance.

## Iterative solver options
1. `step_rate`: The solver step rate. Defaults to 1.9 as a value found to
work well.
2. `adapt_step`: Boolean, whether the solver step rate should be changed
based on the solver error. Defaults to TRUE.
}
\examples{
library(socialmixr)
data(polymod)
r0 <- 2.0
contact_data <- contact_matrix(
  polymod,
  countries = "United Kingdom",
  age.limits = c(0, 20, 40),
  split = TRUE # scaling by demography
)
c_matrix <- t(contact_data$matrix)
d_vector <- contact_data$participants$proportion
n_demo_grps <- length(d_vector)
n_risk_grps <- 3
# prepare p_susceptibility and susceptibility
psusc <- matrix(
  data = 1, nrow = n_demo_grps, ncol = n_risk_grps
)
psusc <- t(apply(psusc, 1, \(x) x / sum(x)))
susc <- matrix(
  data = 1, nrow = n_demo_grps, ncol = n_risk_grps
)

control <- list(
  iterations = 1000,
  tolerance = 1e-6,
  step_rate = 1.9,
  adapt_step = TRUE
)

final_size_grps(
  contact_matrix = r0 * c_matrix,
  demography_vector = d_vector,
  p_susceptibility = psusc,
  susceptibility = susc,
  solver = "newton",
  control = control
)

}
\keyword{epidemic}
\keyword{model}

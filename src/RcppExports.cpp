// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// final_size_newton_cpp
Eigen::ArrayXd final_size_newton_cpp(const Eigen::MatrixXd& contact_matrix, const Eigen::VectorXd& demography, const Eigen::VectorXd& susceptibility, const bool& adapt_step, const double& step_rate, const bool& cache_pi, const double& tolerance);
RcppExport SEXP _finalsize_final_size_newton_cpp(SEXP contact_matrixSEXP, SEXP demographySEXP, SEXP susceptibilitySEXP, SEXP adapt_stepSEXP, SEXP step_rateSEXP, SEXP cache_piSEXP, SEXP toleranceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type contact_matrix(contact_matrixSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type demography(demographySEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type susceptibility(susceptibilitySEXP);
    Rcpp::traits::input_parameter< const bool& >::type adapt_step(adapt_stepSEXP);
    Rcpp::traits::input_parameter< const double& >::type step_rate(step_rateSEXP);
    Rcpp::traits::input_parameter< const bool& >::type cache_pi(cache_piSEXP);
    Rcpp::traits::input_parameter< const double& >::type tolerance(toleranceSEXP);
    rcpp_result_gen = Rcpp::wrap(final_size_newton_cpp(contact_matrix, demography, susceptibility, adapt_step, step_rate, cache_pi, tolerance));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_finalsize_final_size_newton_cpp", (DL_FUNC) &_finalsize_final_size_newton_cpp, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_finalsize(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
